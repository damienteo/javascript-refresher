{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; // ReactDOM.render(<App />, document.getElementById('root'));\n// var -> function\n// let -> block (should use let keyword when you need to re-assign variables)\n// const -> block\n// function sayHello() {\n// \tfor (var i = 0; i < 5; i++) {\n// \t\tconsole.log(i);\n// \t}\n// \tconsole.log(i);\n// }\n// sayHello();\n// //values stored in var are still accessible outside of the curly braces\n// function sayHello() {\n// \tfor (let i = 0; i < 5; i++) {\n// \t\tconsole.log(i);\n// \t}\n// \tconsole.log(i);\n// }\n// sayHello();\n// //values stored in let are also available within the curly braces block\n// const x = 1;\n// x = 2;\n// //x is now read-only, cannot be re-defined\n//objects in javascript are collections of key-value pairs\n// const person = {\n// \tname: 'john',\n// \twalk: function(){}\n// \ttalk() {} //easier way to define method with ES6\n// }\n// walk is a method within the person object.\n// person.talk();\n// person.name = '';\n// person['name'] = 'John';\n// //We use bracket when we don't know ahead of time what property or method we are going to access.\n// const targetMember = 'name';\n// person[targetMember.value] = 'John';\n\nvar person = {\n  name: 'john',\n  walk: function walk() {\n    console.log(this);\n  }\n};\nperson.walk(); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/damienteo/portfolio/javascript-refresher/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","person","name","walk","console","log","unregister"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA,IAAMC,MAAM,GAAG;AACdC,EAAAA,IAAI,EAAE,MADQ;AAEdC,EAAAA,IAAI,EAAE,gBAAU;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA;AAJa,CAAf;AAOAJ,MAAM,CAACE,IAAP,G,CAEA;AACA;AACA;;AACAH,aAAa,CAACM,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// var -> function\n// let -> block (should use let keyword when you need to re-assign variables)\n// const -> block\n\n// function sayHello() {\n// \tfor (var i = 0; i < 5; i++) {\n// \t\tconsole.log(i);\n// \t}\n// \tconsole.log(i);\n// }\n\n// sayHello();\n// //values stored in var are still accessible outside of the curly braces\n\n// function sayHello() {\n// \tfor (let i = 0; i < 5; i++) {\n// \t\tconsole.log(i);\n// \t}\n// \tconsole.log(i);\n// }\n\n// sayHello();\n// //values stored in let are also available within the curly braces block\n\n// const x = 1;\n// x = 2;\n// //x is now read-only, cannot be re-defined\n\n//objects in javascript are collections of key-value pairs\n\n// const person = {\n// \tname: 'john',\n// \twalk: function(){}\n// \ttalk() {} //easier way to define method with ES6\n// }\n\n// walk is a method within the person object.\n\n// person.talk();\n// person.name = '';\n// person['name'] = 'John';\n// //We use bracket when we don't know ahead of time what property or method we are going to access.\n\n// const targetMember = 'name';\n// person[targetMember.value] = 'John';\n\nconst person = {\n\tname: 'john',\n\twalk: function(){\n\t\tconsole.log(this);\n\t}\n}\n\nperson.walk();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}